{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Fisher Kernels Code steps",
  "steps": [
    {
      "file": "Fisher_kernels.m",
      "description": "Clear the workspace, clear the Command Window and Close any open figure",
      "line": 1
    },
    {
      "file": "Fisher_kernels.m",
      "description": "Initialize/Load the YOLOv4 Object Detector. After the first time running those lines of code, you can skip running it again. \r\n\r\nFuture work! \r\nTo use Semantic Segmentation\r\nhttps://github.com/matlab-deep-learning/pretrained-deeplabv3plus",
      "line": 4
    },
    {
      "file": "Fisher_kernels.m",
      "description": "Get the image's folder location and create an imageDatastore",
      "line": 7
    },
    {
      "file": "assignLabels.m",
      "description": "An important step to Datastores, of any kind, is to reset the datastore in every run of the code. That way the index of the reading function for the given datastore returns to its initial place",
      "line": 22
    },
    {
      "file": "assignLabels.m",
      "description": "Preallocation for speedup",
      "line": 24
    },
    {
      "file": "assignLabels.m",
      "description": "Create a waitbar that shows the completion percentage of the Labeling procedure",
      "line": 30
    },
    {
      "file": "assignLabels.m",
      "description": "There has been a case where the Detector couldn't make a prediction. As a result, it returned an empty array, in which case we put a zero in the corresponding index of the scores and a categorical variable with the name \"Review\" in the corresponding index of the Labels variable",
      "line": 41
    },
    {
      "file": "assignLabels.m",
      "description": "In another instance, the Detector detecter more than one instances of an object (or objects) in the same image. To tackle this, we take the maximum of the scores over all the instances, find the corresponding index and use the index to create a unique label for the object with the highest score ",
      "line": 46
    },
    {
      "file": "assignLabels.m",
      "description": "Create a logical vector that will be used as a way to remove the images that where not given a Label. Since the imageDatastore and the underlying images of the folder are closely connected, using the function \"delete\" would alter the database making it time consuming to reformat the data again. For that reason, we use the latter vector as an \"index\" to find the matched with the initially created datastore and place logical ones in the places where the indices to be removed should be. Then a new datastore is created with the excluded indices, giving the final form to the imageDatastore that it'll be used",
      "line": 84
    },
    {
      "file": "assignLabels.m",
      "description": "Create a new datastore that doesn't contain the data that couldn't be labeled",
      "line": 90
    },
    {
      "file": "extractImageFeatures.m",
      "description": "Get the size of all the images, find the minimum value and use it to resize all the images to that size. ",
      "line": 65
    }
  ],
  "ref": "main"
}
function [sigma, mu, p] = getGMMparams(k, varargin)
% GETGMMPARAMS  Returns the appropriate parameter set to create a GMM through
% gmdistribution.
%   [SIGMA, MU, P] = GETGMMPARAMS(K, "Path", PATH) loads
%   the MAT file generated by pyGMM in the specified path
%   and extracts the parameters corresponding to the K-th
%   GMM.
%
%   [SIGMA, MU, P] = GETGMMPARAMS(K, "Sigmas", SIGMAS, "Mus", MUS, "Ps", PS)
%   extracts the parameters corresponding to the K-th GMM in the given
%   parameter collection that matches the size specifications for
%   GMDISTRIBUTION.
%
%   See also LOADGMMPARAMS, GMDISTRIBUTION.
arguments
    k (1, 1) {mustBeInteger}
end
arguments(Repeating)
    varargin
end

parser = getInputParser;
parse(parser, varargin{:});

Sigmas = parser.Sigmas;
Mus = parser.Mus;
Ps = parser.Ps;
if ~isnan(parser.Path)
    [Sigmas, Mus, Ps] = loadGMMparams(parser.Path);
end

if any(isnan(Sigmas), "all") || any(isnan(Mus), "all") || any(isnan(Ps), "all")
    throw( ...
        MException( ...
        "GMM:getGMMparams:MissingArguments", ...
        "You must either specify a file path containing the or pass the" + ...
        " matrices holding all sigma, mu and p of each trained GMM." ...
        ) ...
        )
end

firstDimMu = size(Mu, 1);
if (size(Sigmas, 3) ~= firstDimMu) || (firstDimMu ~= length(Ps))
    throw( ...
        MException( ...
        "GMM:getGMMparams:ArraySizeMismatch", ...
        "The loaded or passed arrays do not match each other over the" + ...
        " dimension of k, as described in the documentation for gmdistribution." ...
        ) ...
        )
end

idx = getIndexRange(k);
sigma = Sigmas(:, :, idx);
mu = Mus(idx, :);
p = Ps(idx);

end

function p = getInputParser
p = inputParser;
addOptional(p, "Path", NaN, @mustBeValidDirectory);
addOptional(p, "Sigmas", NaN, @mustBeNumeric);
addOptional(p, "Mus", NaN, @mustBeNumeric);
addOptional(p, "Ps", NaN, @mustBeNumeric);
end

function mustBeValidDirectory(p)
if ~exists(p, "dir")
    throwAsCaller( ...  
        MException( ...
        "Validator:mustBeValidDirectory", ...
        "Directory does not exist." ...
        ) ...
        )
end
end

function idx = getIndexRange(k)
arguments
    k (1, 1) {mustBeInteger}
end
idx = ones(1, 2);
for i = 2:k
    idx(1) = idx(2) + 1;
    idx(2) = idx(1) + i - 1;
end
end